eksctl create cluster -f cluster.yaml

Steps:-
1. External DNS Setup
2. Nginx Ingress Controller
3. Cert-Manager with Let's Encrypt
4. Prometheus & Grafana with Ingress
5. AlertManager Configuration

First, let's start with External DNS setup:

1. Create IAM Policy for External DNS

Go to Aws -> Iam -> create policy -> json -> copy the content of the policy.json

export cluster_name=my-cluster

oidc_id=$(aws eks describe-cluster --name $cluster_name --query "cluster.identity.oidc.issuer" --output text | cut -d '/' -f 5)

echo $oidc_id

aws iam list-open-id-connect-providers | grep $oidc_id | cut -d "/" -f4

eksctl utils associate-iam-oidc-provider --cluster $cluster_name --approve

export role_name=AmazonExternal_DNS_Role

# Create the IAM service account
eksctl create iamserviceaccount \
    --name external-dns-sa \
    --namespace kube-system \
    --cluster $cluster_name \
    --role-name $role_name \
    --role-only \
    --attach-policy-arn arn:aws:iam::aws:policy/AmazonRoute53FullAccess \
    --approve

# Fetch and modify the trust policy
TRUST_POLICY=$(aws iam get-role --role-name $role_name --query 'Role.AssumeRolePolicyDocument' | \
    sed -e 's/kube-system:external-dns-sa/kube-system:external-dns-*/' -e 's/StringEquals/StringLike/')

# Update the role with the modified trust policy
aws iam update-assume-role-policy --role-name $role_name --policy-document "$TRUST_POLICY"

eksctl create iamserviceaccount --name <SERVICE_ACCOUNT_NAME> --namespace kube-system --cluster CLUSTER_NAME --attach-policy-arn <IAM_POLICY_ARN> --approve --region < >

kubectl api-versions | grep rbac.authorization.k8s.io

if we get output 

then follow below

kubectl create -f clusterrole.yaml

kubectl create -f clusterrolebinding.yaml

kubectl create -f external-dns.yaml(change txt-owner-id as zone id, domain-filter as domain and aws-zone-type as public

kubectl logs -l app.kubernetes.io/name=external-dns -n kube-system

Next, let's set up Nginx Ingress Controller:

Install using Helm
apiVersion: v1
kind: Namespace
metadata:
  name: ingress-nginx
---
helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
helm repo update
helm install ingress-nginx ingress-nginx/ingress-nginx \
  --namespace ingress-nginx \
  --set controller.service.type=LoadBalancer \
  --set controller.service.annotations."service\.beta\.kubernetes\.io/aws-load-balancer-type"="nlb"

```

Now, let's set up Cert-Manager with Let's Encrypt:

Install Cert-Manager

k create -f clusterissuer.yaml
---
Helm commands to install cert-manager:
helm repo add jetstack https://charts.jetstack.io
helm repo update
helm install cert-manager jetstack/cert-manager \
 --namespace cert-manager \
 --create-namespace \
 --set installCRDs=true

```
kubectl get pods -n cert-manager
kubectl create -f clusterissuer.yaml
kubectl get clusterissuer
kubectl create -f secret.yaml

Let's set up Prometheus and Grafana:

helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
helm repo update
k create ns monitoring
helm install prometheus prometheus-community/kube-prometheus-stack   --namespace monitoring   -f values.yaml
k create -f prometheus-alerts.yaml

# Check all deployments
kubectl get pods -n monitoring
kubectl get pods -n cert-manager
kubectl get pods -n ingress-nginx

# Check ingresses
kubectl get ingress -A

# Check certificates
kubectl get certificates -A
```

You should now be able to access:
- Grafana: https://grafana.your-domain.com
- Prometheus: https://prometheus.your-domain.com

To test the alerts:
1. Login to Grafana
2. Go to Alerting section
3. You can simulate high CPU usage with:

kubectl run cpu-test --image=containerstack/cpustress -- --cpu 4 --timeout 60s



